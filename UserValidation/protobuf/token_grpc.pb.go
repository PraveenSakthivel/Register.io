// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Tokens

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginEndpointClient is the client API for LoginEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginEndpointClient interface {
	GetLoginToken(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Response, error)
	GetCurrentRegistrations(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Registrations, error)
}

type loginEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginEndpointClient(cc grpc.ClientConnInterface) LoginEndpointClient {
	return &loginEndpointClient{cc}
}

func (c *loginEndpointClient) GetLoginToken(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Tokens.LoginEndpoint/GetLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginEndpointClient) GetCurrentRegistrations(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Registrations, error) {
	out := new(Registrations)
	err := c.cc.Invoke(ctx, "/Tokens.LoginEndpoint/GetCurrentRegistrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginEndpointServer is the server API for LoginEndpoint service.
// All implementations must embed UnimplementedLoginEndpointServer
// for forward compatibility
type LoginEndpointServer interface {
	GetLoginToken(context.Context, *Credentials) (*Response, error)
	GetCurrentRegistrations(context.Context, *Token) (*Registrations, error)
	mustEmbedUnimplementedLoginEndpointServer()
}

// UnimplementedLoginEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedLoginEndpointServer struct {
}

func (UnimplementedLoginEndpointServer) GetLoginToken(context.Context, *Credentials) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginToken not implemented")
}
func (UnimplementedLoginEndpointServer) GetCurrentRegistrations(context.Context, *Token) (*Registrations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentRegistrations not implemented")
}
func (UnimplementedLoginEndpointServer) mustEmbedUnimplementedLoginEndpointServer() {}

// UnsafeLoginEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginEndpointServer will
// result in compilation errors.
type UnsafeLoginEndpointServer interface {
	mustEmbedUnimplementedLoginEndpointServer()
}

func RegisterLoginEndpointServer(s grpc.ServiceRegistrar, srv LoginEndpointServer) {
	s.RegisterService(&LoginEndpoint_ServiceDesc, srv)
}

func _LoginEndpoint_GetLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginEndpointServer).GetLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tokens.LoginEndpoint/GetLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginEndpointServer).GetLoginToken(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginEndpoint_GetCurrentRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginEndpointServer).GetCurrentRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tokens.LoginEndpoint/GetCurrentRegistrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginEndpointServer).GetCurrentRegistrations(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginEndpoint_ServiceDesc is the grpc.ServiceDesc for LoginEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tokens.LoginEndpoint",
	HandlerType: (*LoginEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginToken",
			Handler:    _LoginEndpoint_GetLoginToken_Handler,
		},
		{
			MethodName: "GetCurrentRegistrations",
			Handler:    _LoginEndpoint_GetCurrentRegistrations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token.proto",
}

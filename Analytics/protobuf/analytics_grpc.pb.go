// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyticsEndpointClient is the client API for AnalyticsEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsEndpointClient interface {
	GetHeatmap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Heatmap, error)
}

type analyticsEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsEndpointClient(cc grpc.ClientConnInterface) AnalyticsEndpointClient {
	return &analyticsEndpointClient{cc}
}

func (c *analyticsEndpointClient) GetHeatmap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Heatmap, error) {
	out := new(Heatmap)
	err := c.cc.Invoke(ctx, "/Analytics.AnalyticsEndpoint/GetHeatmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsEndpointServer is the server API for AnalyticsEndpoint service.
// All implementations must embed UnimplementedAnalyticsEndpointServer
// for forward compatibility
type AnalyticsEndpointServer interface {
	GetHeatmap(context.Context, *Empty) (*Heatmap, error)
	mustEmbedUnimplementedAnalyticsEndpointServer()
}

// UnimplementedAnalyticsEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsEndpointServer struct {
}

func (UnimplementedAnalyticsEndpointServer) GetHeatmap(context.Context, *Empty) (*Heatmap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeatmap not implemented")
}
func (UnimplementedAnalyticsEndpointServer) mustEmbedUnimplementedAnalyticsEndpointServer() {}

// UnsafeAnalyticsEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsEndpointServer will
// result in compilation errors.
type UnsafeAnalyticsEndpointServer interface {
	mustEmbedUnimplementedAnalyticsEndpointServer()
}

func RegisterAnalyticsEndpointServer(s grpc.ServiceRegistrar, srv AnalyticsEndpointServer) {
	s.RegisterService(&AnalyticsEndpoint_ServiceDesc, srv)
}

func _AnalyticsEndpoint_GetHeatmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsEndpointServer).GetHeatmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Analytics.AnalyticsEndpoint/GetHeatmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsEndpointServer).GetHeatmap(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsEndpoint_ServiceDesc is the grpc.ServiceDesc for AnalyticsEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Analytics.AnalyticsEndpoint",
	HandlerType: (*AnalyticsEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeatmap",
			Handler:    _AnalyticsEndpoint_GetHeatmap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics.proto",
}

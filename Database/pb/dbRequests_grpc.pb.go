// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dbRequests

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseWrapperClient is the client API for DatabaseWrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseWrapperClient interface {
	RetrieveClasses(ctx context.Context, in *ReceiveClassesParams, opts ...grpc.CallOption) (*ClassesResponse, error)
	ClassAddStatus(ctx context.Context, in *ClassAddStatusParams, opts ...grpc.CallOption) (*AddStatusResponse, error)
}

type databaseWrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseWrapperClient(cc grpc.ClientConnInterface) DatabaseWrapperClient {
	return &databaseWrapperClient{cc}
}

func (c *databaseWrapperClient) RetrieveClasses(ctx context.Context, in *ReceiveClassesParams, opts ...grpc.CallOption) (*ClassesResponse, error) {
	out := new(ClassesResponse)
	err := c.cc.Invoke(ctx, "/dbRequests.DatabaseWrapper/RetrieveClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseWrapperClient) ClassAddStatus(ctx context.Context, in *ClassAddStatusParams, opts ...grpc.CallOption) (*AddStatusResponse, error) {
	out := new(AddStatusResponse)
	err := c.cc.Invoke(ctx, "/dbRequests.DatabaseWrapper/ClassAddStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseWrapperServer is the server API for DatabaseWrapper service.
// All implementations must embed UnimplementedDatabaseWrapperServer
// for forward compatibility
type DatabaseWrapperServer interface {
	RetrieveClasses(context.Context, *ReceiveClassesParams) (*ClassesResponse, error)
	ClassAddStatus(context.Context, *ClassAddStatusParams) (*AddStatusResponse, error)
	mustEmbedUnimplementedDatabaseWrapperServer()
}

// UnimplementedDatabaseWrapperServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseWrapperServer struct {
}

func (UnimplementedDatabaseWrapperServer) RetrieveClasses(context.Context, *ReceiveClassesParams) (*ClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClasses not implemented")
}
func (UnimplementedDatabaseWrapperServer) ClassAddStatus(context.Context, *ClassAddStatusParams) (*AddStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassAddStatus not implemented")
}
func (UnimplementedDatabaseWrapperServer) mustEmbedUnimplementedDatabaseWrapperServer() {}

// UnsafeDatabaseWrapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseWrapperServer will
// result in compilation errors.
type UnsafeDatabaseWrapperServer interface {
	mustEmbedUnimplementedDatabaseWrapperServer()
}

func RegisterDatabaseWrapperServer(s grpc.ServiceRegistrar, srv DatabaseWrapperServer) {
	s.RegisterService(&DatabaseWrapper_ServiceDesc, srv)
}

func _DatabaseWrapper_RetrieveClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveClassesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseWrapperServer).RetrieveClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbRequests.DatabaseWrapper/RetrieveClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseWrapperServer).RetrieveClasses(ctx, req.(*ReceiveClassesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseWrapper_ClassAddStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassAddStatusParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseWrapperServer).ClassAddStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbRequests.DatabaseWrapper/ClassAddStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseWrapperServer).ClassAddStatus(ctx, req.(*ClassAddStatusParams))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseWrapper_ServiceDesc is the grpc.ServiceDesc for DatabaseWrapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseWrapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbRequests.DatabaseWrapper",
	HandlerType: (*DatabaseWrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveClasses",
			Handler:    _DatabaseWrapper_RetrieveClasses_Handler,
		},
		{
			MethodName: "ClassAddStatus",
			Handler:    _DatabaseWrapper_ClassAddStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbRequests.proto",
}

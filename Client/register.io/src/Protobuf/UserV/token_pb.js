// source: token.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Tokens.Class', null, global);
goog.exportSymbol('proto.Tokens.Credentials', null, global);
goog.exportSymbol('proto.Tokens.Registrations', null, global);
goog.exportSymbol('proto.Tokens.Response', null, global);
goog.exportSymbol('proto.Tokens.Token', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tokens.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tokens.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tokens.Token.displayName = 'proto.Tokens.Token';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tokens.Class = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Tokens.Class.repeatedFields_, null);
};
goog.inherits(proto.Tokens.Class, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tokens.Class.displayName = 'proto.Tokens.Class';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tokens.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tokens.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tokens.Response.displayName = 'proto.Tokens.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tokens.Registrations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Tokens.Registrations.repeatedFields_, null);
};
goog.inherits(proto.Tokens.Registrations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tokens.Registrations.displayName = 'proto.Tokens.Registrations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tokens.Credentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tokens.Credentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tokens.Credentials.displayName = 'proto.Tokens.Credentials';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tokens.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.Tokens.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tokens.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tokens.Token}
 */
proto.Tokens.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tokens.Token;
  return proto.Tokens.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tokens.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tokens.Token}
 */
proto.Tokens.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tokens.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tokens.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tokens.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.Tokens.Token.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Token} returns this
 */
proto.Tokens.Token.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Tokens.Class.repeatedFields_ = [12,13,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tokens.Class.prototype.toObject = function(opt_includeInstance) {
  return proto.Tokens.Class.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tokens.Class} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Class.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, ""),
    school: jspb.Message.getFieldWithDefault(msg, 3, 0),
    department: jspb.Message.getFieldWithDefault(msg, 4, 0),
    classnumber: jspb.Message.getFieldWithDefault(msg, 5, 0),
    index: jspb.Message.getFieldWithDefault(msg, 6, ""),
    name: jspb.Message.getFieldWithDefault(msg, 7, ""),
    section: jspb.Message.getFieldWithDefault(msg, 8, ""),
    meetinglocation: jspb.Message.getFieldWithDefault(msg, 9, ""),
    meetingtimes: jspb.Message.getFieldWithDefault(msg, 10, ""),
    exam: jspb.Message.getFieldWithDefault(msg, 11, ""),
    instructorsList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
    codesList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    synopsis: jspb.Message.getFieldWithDefault(msg, 14, ""),
    booksList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
    credits: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tokens.Class}
 */
proto.Tokens.Class.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tokens.Class;
  return proto.Tokens.Class.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tokens.Class} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tokens.Class}
 */
proto.Tokens.Class.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSchool(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDepartment(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClassnumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSection(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetinglocation(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeetingtimes(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setExam(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addInstructors(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addCodes(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSynopsis(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addBooks(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCredits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tokens.Class.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tokens.Class.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tokens.Class} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Class.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSchool();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDepartment();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getClassnumber();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSection();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMeetinglocation();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMeetingtimes();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getExam();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getInstructorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
  f = message.getCodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getSynopsis();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBooksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getCredits();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
};


/**
 * optional string Location = 1;
 * @return {string}
 */
proto.Tokens.Class.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Level = 2;
 * @return {string}
 */
proto.Tokens.Class.prototype.getLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setLevel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 School = 3;
 * @return {number}
 */
proto.Tokens.Class.prototype.getSchool = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setSchool = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 Department = 4;
 * @return {number}
 */
proto.Tokens.Class.prototype.getDepartment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setDepartment = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 ClassNumber = 5;
 * @return {number}
 */
proto.Tokens.Class.prototype.getClassnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setClassnumber = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string Index = 6;
 * @return {string}
 */
proto.Tokens.Class.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setIndex = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string Name = 7;
 * @return {string}
 */
proto.Tokens.Class.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Section = 8;
 * @return {string}
 */
proto.Tokens.Class.prototype.getSection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setSection = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string MeetingLocation = 9;
 * @return {string}
 */
proto.Tokens.Class.prototype.getMeetinglocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setMeetinglocation = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string MeetingTimes = 10;
 * @return {string}
 */
proto.Tokens.Class.prototype.getMeetingtimes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setMeetingtimes = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string Exam = 11;
 * @return {string}
 */
proto.Tokens.Class.prototype.getExam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setExam = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated string Instructors = 12;
 * @return {!Array<string>}
 */
proto.Tokens.Class.prototype.getInstructorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setInstructorsList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.addInstructors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.clearInstructorsList = function() {
  return this.setInstructorsList([]);
};


/**
 * repeated string Codes = 13;
 * @return {!Array<string>}
 */
proto.Tokens.Class.prototype.getCodesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setCodesList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.addCodes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.clearCodesList = function() {
  return this.setCodesList([]);
};


/**
 * optional string Synopsis = 14;
 * @return {string}
 */
proto.Tokens.Class.prototype.getSynopsis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setSynopsis = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * repeated string Books = 15;
 * @return {!Array<string>}
 */
proto.Tokens.Class.prototype.getBooksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setBooksList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.addBooks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.clearBooksList = function() {
  return this.setBooksList([]);
};


/**
 * optional int64 Credits = 16;
 * @return {number}
 */
proto.Tokens.Class.prototype.getCredits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tokens.Class} returns this
 */
proto.Tokens.Class.prototype.setCredits = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tokens.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Tokens.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tokens.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    usertype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tokens.Response}
 */
proto.Tokens.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tokens.Response;
  return proto.Tokens.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tokens.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tokens.Response}
 */
proto.Tokens.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUsertype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tokens.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tokens.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tokens.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsertype();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string Token = 1;
 * @return {string}
 */
proto.Tokens.Response.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Response} returns this
 */
proto.Tokens.Response.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 UserType = 2;
 * @return {number}
 */
proto.Tokens.Response.prototype.getUsertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tokens.Response} returns this
 */
proto.Tokens.Response.prototype.setUsertype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Tokens.Registrations.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tokens.Registrations.prototype.toObject = function(opt_includeInstance) {
  return proto.Tokens.Registrations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tokens.Registrations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Registrations.toObject = function(includeInstance, msg) {
  var f, obj = {
    usertype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    classesList: jspb.Message.toObjectList(msg.getClassesList(),
    proto.Tokens.Class.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tokens.Registrations}
 */
proto.Tokens.Registrations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tokens.Registrations;
  return proto.Tokens.Registrations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tokens.Registrations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tokens.Registrations}
 */
proto.Tokens.Registrations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUsertype(value);
      break;
    case 2:
      var value = new proto.Tokens.Class;
      reader.readMessage(value,proto.Tokens.Class.deserializeBinaryFromReader);
      msg.addClasses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tokens.Registrations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tokens.Registrations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tokens.Registrations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Registrations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsertype();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getClassesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Tokens.Class.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 UserType = 1;
 * @return {number}
 */
proto.Tokens.Registrations.prototype.getUsertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tokens.Registrations} returns this
 */
proto.Tokens.Registrations.prototype.setUsertype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Class Classes = 2;
 * @return {!Array<!proto.Tokens.Class>}
 */
proto.Tokens.Registrations.prototype.getClassesList = function() {
  return /** @type{!Array<!proto.Tokens.Class>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Tokens.Class, 2));
};


/**
 * @param {!Array<!proto.Tokens.Class>} value
 * @return {!proto.Tokens.Registrations} returns this
*/
proto.Tokens.Registrations.prototype.setClassesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Tokens.Class=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Tokens.Class}
 */
proto.Tokens.Registrations.prototype.addClasses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Tokens.Class, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Tokens.Registrations} returns this
 */
proto.Tokens.Registrations.prototype.clearClassesList = function() {
  return this.setClassesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tokens.Credentials.prototype.toObject = function(opt_includeInstance) {
  return proto.Tokens.Credentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tokens.Credentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Credentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    netid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tokens.Credentials}
 */
proto.Tokens.Credentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tokens.Credentials;
  return proto.Tokens.Credentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tokens.Credentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tokens.Credentials}
 */
proto.Tokens.Credentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tokens.Credentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tokens.Credentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tokens.Credentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tokens.Credentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string NetID = 1;
 * @return {string}
 */
proto.Tokens.Credentials.prototype.getNetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Credentials} returns this
 */
proto.Tokens.Credentials.prototype.setNetid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Password = 2;
 * @return {string}
 */
proto.Tokens.Credentials.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tokens.Credentials} returns this
 */
proto.Tokens.Credentials.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.Tokens);
